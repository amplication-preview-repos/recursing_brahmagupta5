/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CompanyService } from "../company.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CompanyCreateInput } from "./CompanyCreateInput";
import { Company } from "./Company";
import { CompanyFindManyArgs } from "./CompanyFindManyArgs";
import { CompanyWhereUniqueInput } from "./CompanyWhereUniqueInput";
import { CompanyUpdateInput } from "./CompanyUpdateInput";
import { CompanyDataFindManyArgs } from "../../companyData/base/CompanyDataFindManyArgs";
import { CompanyData } from "../../companyData/base/CompanyData";
import { CompanyDataWhereUniqueInput } from "../../companyData/base/CompanyDataWhereUniqueInput";
import { PrivacyAgreementFindManyArgs } from "../../privacyAgreement/base/PrivacyAgreementFindManyArgs";
import { PrivacyAgreement } from "../../privacyAgreement/base/PrivacyAgreement";
import { PrivacyAgreementWhereUniqueInput } from "../../privacyAgreement/base/PrivacyAgreementWhereUniqueInput";
import { UserCommunicationFindManyArgs } from "../../userCommunication/base/UserCommunicationFindManyArgs";
import { UserCommunication } from "../../userCommunication/base/UserCommunication";
import { UserCommunicationWhereUniqueInput } from "../../userCommunication/base/UserCommunicationWhereUniqueInput";
import { UserRequestFindManyArgs } from "../../userRequest/base/UserRequestFindManyArgs";
import { UserRequest } from "../../userRequest/base/UserRequest";
import { UserRequestWhereUniqueInput } from "../../userRequest/base/UserRequestWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CompanyControllerBase {
  constructor(
    protected readonly service: CompanyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Company })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CompanyCreateInput,
  })
  async createCompany(
    @common.Body() data: CompanyCreateInput
  ): Promise<Company> {
    return await this.service.createCompany({
      data: data,
      select: {
        contactInfo: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Company] })
  @ApiNestedQuery(CompanyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async companies(@common.Req() request: Request): Promise<Company[]> {
    const args = plainToClass(CompanyFindManyArgs, request.query);
    return this.service.companies({
      ...args,
      select: {
        contactInfo: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async company(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    const result = await this.service.company({
      where: params,
      select: {
        contactInfo: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: CompanyUpdateInput,
  })
  async updateCompany(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() data: CompanyUpdateInput
  ): Promise<Company | null> {
    try {
      return await this.service.updateCompany({
        where: params,
        data: data,
        select: {
          contactInfo: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Company })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCompany(
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<Company | null> {
    try {
      return await this.service.deleteCompany({
        where: params,
        select: {
          contactInfo: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/companyDataItems")
  @ApiNestedQuery(CompanyDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CompanyData",
    action: "read",
    possession: "any",
  })
  async findCompanyDataItems(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<CompanyData[]> {
    const query = plainToClass(CompanyDataFindManyArgs, request.query);
    const results = await this.service.findCompanyDataItems(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dataType: true,
        dataValue: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/companyDataItems")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async connectCompanyDataItems(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CompanyDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyDataItems: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/companyDataItems")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async updateCompanyDataItems(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CompanyDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyDataItems: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/companyDataItems")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async disconnectCompanyDataItems(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: CompanyDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyDataItems: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/privacyAgreements")
  @ApiNestedQuery(PrivacyAgreementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PrivacyAgreement",
    action: "read",
    possession: "any",
  })
  async findPrivacyAgreements(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<PrivacyAgreement[]> {
    const query = plainToClass(PrivacyAgreementFindManyArgs, request.query);
    const results = await this.service.findPrivacyAgreements(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        version: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/privacyAgreements")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async connectPrivacyAgreements(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: PrivacyAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      privacyAgreements: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/privacyAgreements")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async updatePrivacyAgreements(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: PrivacyAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      privacyAgreements: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/privacyAgreements")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async disconnectPrivacyAgreements(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: PrivacyAgreementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      privacyAgreements: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userCommunications")
  @ApiNestedQuery(UserCommunicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserCommunication",
    action: "read",
    possession: "any",
  })
  async findUserCommunications(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<UserCommunication[]> {
    const query = plainToClass(UserCommunicationFindManyArgs, request.query);
    const results = await this.service.findUserCommunications(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        message: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userCommunications")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async connectUserCommunications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: UserCommunicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userCommunications: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userCommunications")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async updateUserCommunications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: UserCommunicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userCommunications: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userCommunications")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async disconnectUserCommunications(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: UserCommunicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userCommunications: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userRequests")
  @ApiNestedQuery(UserRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserRequest",
    action: "read",
    possession: "any",
  })
  async findUserRequests(
    @common.Req() request: Request,
    @common.Param() params: CompanyWhereUniqueInput
  ): Promise<UserRequest[]> {
    const query = plainToClass(UserRequestFindManyArgs, request.query);
    const results = await this.service.findUserRequests(params.id, {
      ...query,
      select: {
        company: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        requestType: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userRequests")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async connectUserRequests(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: UserRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRequests: {
        connect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userRequests")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async updateUserRequests(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: UserRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRequests: {
        set: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userRequests")
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "update",
    possession: "any",
  })
  async disconnectUserRequests(
    @common.Param() params: CompanyWhereUniqueInput,
    @common.Body() body: UserRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userRequests: {
        disconnect: body,
      },
    };
    await this.service.updateCompany({
      where: params,
      data,
      select: { id: true },
    });
  }
}
