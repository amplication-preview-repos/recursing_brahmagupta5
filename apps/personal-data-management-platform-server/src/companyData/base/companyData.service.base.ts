/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CompanyData as PrismaCompanyData,
  Company as PrismaCompany,
  User as PrismaUser,
} from "@prisma/client";

export class CompanyDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompanyDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.companyData.count(args);
  }

  async companyDataItems(
    args: Prisma.CompanyDataFindManyArgs
  ): Promise<PrismaCompanyData[]> {
    return this.prisma.companyData.findMany(args);
  }
  async companyData(
    args: Prisma.CompanyDataFindUniqueArgs
  ): Promise<PrismaCompanyData | null> {
    return this.prisma.companyData.findUnique(args);
  }
  async createCompanyData(
    args: Prisma.CompanyDataCreateArgs
  ): Promise<PrismaCompanyData> {
    return this.prisma.companyData.create(args);
  }
  async updateCompanyData(
    args: Prisma.CompanyDataUpdateArgs
  ): Promise<PrismaCompanyData> {
    return this.prisma.companyData.update(args);
  }
  async deleteCompanyData(
    args: Prisma.CompanyDataDeleteArgs
  ): Promise<PrismaCompanyData> {
    return this.prisma.companyData.delete(args);
  }

  async getCompany(parentId: string): Promise<PrismaCompany | null> {
    return this.prisma.companyData
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.companyData
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
